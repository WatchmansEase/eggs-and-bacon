{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\components\\\\QuizScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { changeScreen, changeScore } from '../Redux/actions';\nimport Questions from '../Redux/Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  // const [score, setScore] = useState(0);\n  const dispatch = useDispatch();\n  const score = useSelector(state => state.score);\n  const currentQuestion = Questions[currentQuestionIndex];\n\n  // const handleAnswerSelection = (isCorrect) => {\n  //   if (isCorrect) {\n  //     // Increase the score if the answer is correct\n  //     setScore(score + 1);\n  //   }\n  // };\n\n  const handleNextQuestion = () => {\n    // Check if the current answer was correct and then update the score\n    const currentAnswer = Questions[currentQuestionIndex];\n    if (currentAnswer && currentAnswer.options.some(option => option.isCorrect)) {\n      dispatch({\n        type: 'SET_INDEX',\n        index: questionIndex + 1\n      }); // Dispatch the action to increment the score\n    }\n\n    // Move to the next question\n    if (currentQuestionIndex < Questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // If all questions answered, move to the result screen\n      dispatch(changeScreen('result')); // Change to result screen when all questions are answered\n    }\n  };\n\n  const handleGoBack = () => {\n    dispatch(changeScreen('menu')); // Dispatch changeScreen action with \"intro\" screen\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quiz Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              handleAnswerSelection(option.isCorrect);\n            },\n            children: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGoBack,\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizScreen, \"Apv+ZWu6PAWfCu+i9Y30LmKZSx0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = QuizScreen;\nexport default QuizScreen;\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","changeScreen","changeScore","Questions","jsxDEV","_jsxDEV","QuizScreen","_s","currentQuestionIndex","setCurrentQuestionIndex","dispatch","score","state","currentQuestion","handleNextQuestion","currentAnswer","options","some","option","isCorrect","type","index","questionIndex","length","handleGoBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","map","onClick","handleAnswerSelection","id","_c","$RefreshReg$"],"sources":["C:/Users/user/my-app/src/components/QuizScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { changeScreen, changeScore } from '../Redux/actions';\r\nimport Questions from '../Redux/Questions';\r\n\r\nfunction QuizScreen() {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  // const [score, setScore] = useState(0);\r\n  const dispatch = useDispatch();\r\n  const score = useSelector(state => state.score)\r\n  const currentQuestion = Questions[currentQuestionIndex];\r\n\r\n  // const handleAnswerSelection = (isCorrect) => {\r\n  //   if (isCorrect) {\r\n  //     // Increase the score if the answer is correct\r\n  //     setScore(score + 1);\r\n  //   }\r\n  // };\r\n\r\n  const handleNextQuestion = () => {\r\n    // Check if the current answer was correct and then update the score\r\n    const currentAnswer = Questions[currentQuestionIndex];\r\n    if (currentAnswer && currentAnswer.options.some((option) => option.isCorrect)) {\r\n      dispatch({\r\n        type: 'SET_INDEX',\r\n        index: questionIndex + 1,\r\n      }) // Dispatch the action to increment the score\r\n    }\r\n\r\n    // Move to the next question\r\n    if (currentQuestionIndex < Questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // If all questions answered, move to the result screen\r\n      dispatch(changeScreen('result')); // Change to result screen when all questions are answered\r\n    }\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    dispatch(changeScreen('menu')); // Dispatch changeScreen action with \"intro\" screen\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h2>Quiz Screen</h2>\r\n      {currentQuestion && (\r\n        <div>\r\n          <h3>{currentQuestion.text}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option) => (\r\n              <li key={option.id}>\r\n                <button\r\n                  onClick={() => {\r\n                    handleAnswerSelection(option.isCorrect);\r\n                  }}\r\n                >\r\n                  {option.text}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button onClick={handleNextQuestion}>Next Question</button>\r\n        </div>\r\n      )}\r\n      <p>Current Score: {score}</p>\r\n      <button onClick={handleGoBack}>Go Back</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}