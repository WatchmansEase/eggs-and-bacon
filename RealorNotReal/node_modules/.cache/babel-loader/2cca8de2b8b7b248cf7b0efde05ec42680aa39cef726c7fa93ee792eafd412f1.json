{"ast":null,"code":"var _jsxFileName = \"/Users/gemmathirsk/Library/CloudStorage/GoogleDrive-gemma@thatsherbusiness.co.uk/My Drive/Admin/Code First Girls/CFGdegree/Assignments/Homework 2 - Due 1st December/CFG-full-stack-group-1-final-project/RealorNotReal/src/components/pages/QuizScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeScore } from \"../../Redux/actions\";\nimport Questions from \"../../Data/Questions\";\nimport { useNavigate } from \"react-router-dom\";\nimport ResetButton from \"../buttons/ResetButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // State to keep track of current question\n  const [currentOption, setCurrentOption] = useState(null); //State to keep selected\n  const navigate = useNavigate(); // Navigate to different routes in the app\n  const dispatch = useDispatch(); //Dispatch action to update state in Redux store\n  const score = useSelector(state => state.score); // Accessing score from Redux store\n  const currentQuestion = Questions[currentQuestionIndex];\n\n  // Store selected answer by user\n  const handleAnswerSelection = isCorrect => {\n    setCurrentOption(isCorrect);\n  };\n\n  // Handle next question and score\n  const handleNextQuestion = () => {\n    // Prevent navigation if no option is selected\n    if (currentOption === null) {\n      alert('Please select an option before proceeding!');\n      return;\n    }\n    // Navigate to next question and update score if answer is correct\n    if (currentQuestionIndex < Questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      if (currentOption === true) {\n        dispatch(changeScore(score + 1));\n      }\n      setCurrentOption(null); // Reset selected option after each question\n    } else {\n      // Navigate to result screen if all questions have been answered\n      navigate(\"/result\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quiz Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"answers\",\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"answer\",\n            onClick: () => handleAnswerSelection(option.isCorrect),\n            children: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleNextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ResetButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizScreen, \"NNVj4MSEYVPW5G22D+ivLOYlFss=\", false, function () {\n  return [useNavigate, useDispatch, useSelector];\n});\n_c = QuizScreen;\nexport default QuizScreen;\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","changeScore","Questions","useNavigate","ResetButton","jsxDEV","_jsxDEV","QuizScreen","_s","currentQuestionIndex","setCurrentQuestionIndex","currentOption","setCurrentOption","navigate","dispatch","score","state","currentQuestion","handleAnswerSelection","isCorrect","handleNextQuestion","alert","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","options","map","option","onClick","id","_c","$RefreshReg$"],"sources":["/Users/gemmathirsk/Library/CloudStorage/GoogleDrive-gemma@thatsherbusiness.co.uk/My Drive/Admin/Code First Girls/CFGdegree/Assignments/Homework 2 - Due 1st December/CFG-full-stack-group-1-final-project/RealorNotReal/src/components/pages/QuizScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeScore } from \"../../Redux/actions\";\nimport Questions from \"../../Data/Questions\";\nimport { useNavigate } from \"react-router-dom\";\nimport ResetButton from \"../buttons/ResetButton\";\n\nfunction QuizScreen() {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // State to keep track of current question\n  const [currentOption, setCurrentOption] = useState(null); //State to keep selected\n  const navigate = useNavigate(); // Navigate to different routes in the app\n  const dispatch = useDispatch(); //Dispatch action to update state in Redux store\n  const score = useSelector((state) => state.score); // Accessing score from Redux store\n  const currentQuestion = Questions[currentQuestionIndex];\n\n  // Store selected answer by user\n  const handleAnswerSelection = (isCorrect) => {\n    setCurrentOption(isCorrect);\n  };\n\n  // Handle next question and score\n  const handleNextQuestion = () => {\n    // Prevent navigation if no option is selected\n    if (currentOption === null) {\n      alert('Please select an option before proceeding!');\n      return; \n    }\n    // Navigate to next question and update score if answer is correct\n    if (currentQuestionIndex < Questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      if (currentOption === true) {\n        dispatch(changeScore(score + 1));\n      }\n      setCurrentOption(null); // Reset selected option after each question\n    } else {\n      // Navigate to result screen if all questions have been answered\n      navigate(\"/result\");\n    }\n  };\n\n  return (\n    <div className=\"quiz-screen\">\n      <h2>Quiz Screen</h2>\n      {currentQuestion && (\n        <div>\n          <h3>{currentQuestion.text}</h3>\n          <ul className=\"answers\">\n            {currentQuestion.options.map((option) => (\n              <li key={option.id}>\n                <button className=\"answer\" onClick={() => handleAnswerSelection(option.isCorrect)}>\n                  {option.text}\n                </button>\n              </li>\n            ))}\n          </ul>\n          <button className=\"submit-button\" onClick={handleNextQuestion}>Next Question</button>\n        </div>\n      )}\n      <ResetButton />\n      <p>Current Score: {score}</p>\n    </div>\n  );\n}\n\nexport default QuizScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}