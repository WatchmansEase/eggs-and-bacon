{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\components\\\\QuizScreen.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { setScore, setQuizState } from \"../Redux/actions\"; // Assuming you have an action to set the score\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen({\n  questions,\n  currQuestionIndex,\n  setScore\n}) {\n  const handleOptionClick = selectedOption => {\n    const correctAnswer = questions[currQuestionIndex].options.find(option => option.isCorrect);\n    if (selectedOption === correctAnswer.text) {\n      setScore(); // Call the action to increment the score\n    }\n    // Handle other logic for user's option selection\n  };\n\n  if (!questions || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this); // Handle loading state\n  }\n\n  const currentQuestion = questions[currQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Question \", currQuestionIndex + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentQuestion.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        onClick: () => handleOptionClick(option.text),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: option.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Progress: \", currQuestionIndex + 1, \" / \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_c = QuizScreen;\nconst mapStateToProps = state => ({\n  questions: state.questions,\n  // Assuming questions are stored in Redux state\n  currQuestionIndex: state.currQuestionIndex // Current question index in Redux state\n  // Add other necessary state properties...\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setScore: () => dispatch(setScore()) // Action to update the score\n  // Add other action creators if needed...\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizScreen);\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","connect","setScore","setQuizState","jsxDEV","_jsxDEV","QuizScreen","questions","currQuestionIndex","handleOptionClick","selectedOption","correctAnswer","options","find","option","isCorrect","text","length","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","className","map","onClick","id","_c","mapStateToProps","state","mapDispatchToProps","dispatch","$RefreshReg$"],"sources":["C:/Users/user/my-app/src/components/QuizScreen.js"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setScore, setQuizState } from \"../Redux/actions\"; // Assuming you have an action to set the score\r\n\r\nfunction QuizScreen({ questions, currQuestionIndex, setScore }) {\r\n  const handleOptionClick = (selectedOption) => {\r\n    const correctAnswer = questions[currQuestionIndex].options.find(\r\n      (option) => option.isCorrect\r\n    );\r\n    if (selectedOption === correctAnswer.text) {\r\n      setScore(); // Call the action to increment the score\r\n    }\r\n    // Handle other logic for user's option selection\r\n  };\r\n\r\n  if (!questions || questions.length === 0) {\r\n    return <div>Loading...</div>; // Handle loading state\r\n  }\r\n\r\n  const currentQuestion = questions[currQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h2>Question {currQuestionIndex + 1} of {questions.length}</h2>\r\n      <h3>{currentQuestion.text}</h3>\r\n      <div className=\"options\">\r\n        {currentQuestion.options.map((option) => (\r\n          <div\r\n            key={option.id}\r\n            className=\"option\"\r\n            onClick={() => handleOptionClick(option.text)}\r\n          >\r\n            <p>{option.text}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {/* Display progress and number of correct answers */}\r\n      <p>Progress: {currQuestionIndex + 1} / {questions.length}</p>\r\n      {/* Display the number of correct answers */}\r\n      {/* You can get the correct answers count from Redux state */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  questions: state.questions, // Assuming questions are stored in Redux state\r\n  currQuestionIndex: state.currQuestionIndex, // Current question index in Redux state\r\n  // Add other necessary state properties...\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setScore: () => dispatch(setScore()), // Action to update the score\r\n  // Add other action creators if needed...\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizScreen);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}