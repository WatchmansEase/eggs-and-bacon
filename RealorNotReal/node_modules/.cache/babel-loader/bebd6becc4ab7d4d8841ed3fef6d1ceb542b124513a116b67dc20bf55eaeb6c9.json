{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ehunt\\\\Desktop\\\\elaine-development-2\\\\CFG-full-stack-group-1-final-project\\\\RealorNotReal\\\\src\\\\components\\\\pages\\\\QuizScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeScore } from \"../../Redux/actions\";\nimport Questions from \"../../Data/Questions\";\nimport { useNavigate } from \"react-router-dom\";\nimport ResetButton from \"../buttons/ResetButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentOption, setCurrentOption] = useState(null);\n  const [timer, setTimer] = useState(30); // Initial timer value in seconds\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const score = useSelector(state => state.score);\n  const currentQuestion = Questions[currentQuestionIndex];\n  const handleAnswerSelection = isCorrect => {\n    setCurrentOption(isCorrect);\n  };\n  const handleNextQuestion = () => {\n    if (currentOption === null) {\n      alert('Please select an option before proceeding!');\n      return;\n    }\n    if (currentQuestionIndex < Questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      if (currentOption === true) {\n        dispatch(changeScore(score + 1));\n      }\n      setCurrentOption(null);\n      setTimer(30); // Reset timer for the next question\n    } else {\n      navigate(\"/result\");\n    }\n  };\n\n  // useEffect to handle timer countdown\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      if (timer > 0) {\n        setTimer(prevTimer => prevTimer - 1);\n      } else {\n        // Auto-submit when timer reaches 0\n        handleNextQuestion();\n      }\n    }, 1000);\n\n    // Cleanup timer interval on component unmount or question change\n    return () => clearInterval(timerId);\n  }, [timer, currentQuestionIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quiz Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time remaining: \", timer, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"answers\",\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `answer ${currentOption === option.isCorrect ? 'selected' : ''}`,\n            onClick: () => handleAnswerSelection(option.isCorrect),\n            children: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        onClick: handleNextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ResetButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizScreen, \"VFeQHSOfd/0a3Bnm52VqX6GqwLg=\", false, function () {\n  return [useNavigate, useDispatch, useSelector];\n});\n_c = QuizScreen;\nexport default QuizScreen;\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","changeScore","Questions","useNavigate","ResetButton","jsxDEV","_jsxDEV","QuizScreen","_s","currentQuestionIndex","setCurrentQuestionIndex","currentOption","setCurrentOption","timer","setTimer","navigate","dispatch","score","state","currentQuestion","handleAnswerSelection","isCorrect","handleNextQuestion","alert","length","timerId","setInterval","prevTimer","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","options","map","option","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/ehunt/Desktop/elaine-development-2/CFG-full-stack-group-1-final-project/RealorNotReal/src/components/pages/QuizScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeScore } from \"../../Redux/actions\";\r\nimport Questions from \"../../Data/Questions\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ResetButton from \"../buttons/ResetButton\";\r\n\r\nfunction QuizScreen() {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [currentOption, setCurrentOption] = useState(null);\r\n  const [timer, setTimer] = useState(30); // Initial timer value in seconds\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const score = useSelector((state) => state.score);\r\n  const currentQuestion = Questions[currentQuestionIndex];\r\n\r\n  const handleAnswerSelection = (isCorrect) => {\r\n    setCurrentOption(isCorrect);\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    if (currentOption === null) {\r\n      alert('Please select an option before proceeding!');\r\n      return;\r\n    }\r\n\r\n    if (currentQuestionIndex < Questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      if (currentOption === true) {\r\n        dispatch(changeScore(score + 1));\r\n      }\r\n      setCurrentOption(null);\r\n      setTimer(30); // Reset timer for the next question\r\n    } else {\r\n      navigate(\"/result\");\r\n    }\r\n  };\r\n\r\n  // useEffect to handle timer countdown\r\n  useEffect(() => {\r\n    const timerId = setInterval(() => {\r\n      if (timer > 0) {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      } else {\r\n        // Auto-submit when timer reaches 0\r\n        handleNextQuestion();\r\n      }\r\n    }, 1000);\r\n\r\n    // Cleanup timer interval on component unmount or question change\r\n    return () => clearInterval(timerId);\r\n  }, [timer, currentQuestionIndex]);\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h2>Quiz Screen</h2>\r\n      <p>Time remaining: {timer} seconds</p>\r\n      {currentQuestion && (\r\n        <div>\r\n          <h3>{currentQuestion.text}</h3>\r\n          <ul className=\"answers\">\r\n            {currentQuestion.options.map((option) => (\r\n              <li key={option.id}>\r\n                <button\r\n                  className={`answer ${currentOption === option.isCorrect ? 'selected' : ''}`}\r\n                  onClick={() => handleAnswerSelection(option.isCorrect)}\r\n                >\r\n                  {option.text}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button className=\"submit-button\" onClick={handleNextQuestion}>\r\n            Next Question\r\n          </button>\r\n        </div>\r\n      )}\r\n      <ResetButton />\r\n      <p>Current Score: {score}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizScreen;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}