{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\components\\\\QuizScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useSelector } from \"react-redux\";\nimport { changeScreen, incrementScore } from '../Redux/actions';\nimport Questions from '../Redux/Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen({\n  changeScreen\n}) {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const currentQuestion = Questions[currentQuestionIndex];\n  const handleAnswerSelection = isCorrect => {\n    if (isCorrect) {\n      // Increase the score if the answer is correct\n      setScore(score + 1);\n    }\n  };\n  const handleNextQuestion = () => {\n    // Check if the current answer was correct and then update the score\n    const currentAnswer = Questions[currentQuestionIndex];\n    if (currentAnswer && currentAnswer.options.some(option => option.isCorrect)) {\n      changeScore(); // Dispatch the action to increment the score\n    }\n\n    // Move to the next question\n    if (currentQuestionIndex < Questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // If all questions answered, move to the result screen\n      changeScreen('result'); // Change to result screen when all questions are answered\n    }\n  };\n\n  const handleGoBack = () => {\n    changeScreen('menu'); // Dispatch changeScreen action with \"intro\" screen\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quiz Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              handleAnswerSelection(option.isCorrect);\n            },\n            children: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGoBack,\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizScreen, \"VSe/zGaszi5H8U3t1r1DTVKnbNg=\");\n_c = QuizScreen;\nconst mapDispatchToProps = dispatch => ({\n  changeScreen: screen => dispatch(changeScreen(screen)),\n  changeScore: () => dispatch(changeScore()) // Add this line\n});\n\nexport default connect(null, mapDispatchToProps)(QuizScreen);\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useState","connect","useSelector","changeScreen","incrementScore","Questions","jsxDEV","_jsxDEV","QuizScreen","_s","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","currentQuestion","handleAnswerSelection","isCorrect","handleNextQuestion","currentAnswer","options","some","option","changeScore","length","handleGoBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","map","onClick","id","_c","mapDispatchToProps","dispatch","screen","$RefreshReg$"],"sources":["C:/Users/user/my-app/src/components/QuizScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useSelector } from \"react-redux\";\r\nimport { changeScreen, incrementScore } from '../Redux/actions';\r\nimport Questions from '../Redux/Questions';\r\n\r\nfunction QuizScreen({ changeScreen }) {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const currentQuestion = Questions[currentQuestionIndex];\r\n\r\n  const handleAnswerSelection = (isCorrect) => {\r\n    if (isCorrect) {\r\n      // Increase the score if the answer is correct\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    // Check if the current answer was correct and then update the score\r\n    const currentAnswer = Questions[currentQuestionIndex];\r\n    if (currentAnswer && currentAnswer.options.some((option) => option.isCorrect)) {\r\n      changeScore(); // Dispatch the action to increment the score\r\n    }\r\n  \r\n    // Move to the next question\r\n    if (currentQuestionIndex < Questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // If all questions answered, move to the result screen\r\n      changeScreen('result'); // Change to result screen when all questions are answered\r\n    }\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    changeScreen('menu'); // Dispatch changeScreen action with \"intro\" screen\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h2>Quiz Screen</h2>\r\n      {currentQuestion && (\r\n        <div>\r\n          <h3>{currentQuestion.text}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option) => (\r\n              <li key={option.id}>\r\n                <button\r\n                  onClick={() => {\r\n                    handleAnswerSelection(option.isCorrect);\r\n                  }}\r\n                >\r\n                  {option.text}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button onClick={handleNextQuestion}>Next Question</button>\r\n        </div>\r\n      )}\r\n      <p>Current Score: {score}</p>\r\n      <button onClick={handleGoBack}>Go Back</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeScreen: (screen) => dispatch(changeScreen(screen)),\r\n  changeScore: () => dispatch(changeScore()), // Add this line\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(QuizScreen);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}