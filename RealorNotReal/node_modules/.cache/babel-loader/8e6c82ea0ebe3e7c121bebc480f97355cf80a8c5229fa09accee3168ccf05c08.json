{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\components\\\\pages\\\\QuizScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeScore } from \"../../Redux/actions\";\nimport Questions from \"../../Data/Questions\";\nimport { useNavigate } from \"react-router-dom\";\nimport ResetButton from \"../buttons/ResetButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen() {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // State to keep track of current question\n  const [currentScore, setCurrentScore] = useState(0); // State to keep track of score\n  const [currentOption, setCurrentOption] = useState(null);\n  const navigate = useNavigate(); // Navigate to different routes in the app\n  const dispatch = useDispatch(); //Dispatch action to update state in Redux store\n  const score = useSelector(state => state.score); // Accessing score from Redux store\n\n  const currentQuestion = Questions[currentQuestionIndex];\n\n  // Handle answer selected by user\n  const handleAnswerSelection = isCorrect => {\n    setCurrentOption(isCorrect);\n  };\n\n  // Handle next question\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < Questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      if (currentOption === true) {\n        dispatch(changeScore(score + 1));\n      }\n    } else {\n      navigate(\"/result\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quiz Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAnswerSelection(option.isCorrect),\n            children: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 17\n          }, this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResetButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizScreen, \"SnaTaM8+xlxylqggN+RovPhyr0Q=\", false, function () {\n  return [useNavigate, useDispatch, useSelector];\n});\n_c = QuizScreen;\nexport default QuizScreen;\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useState","useDispatch","useSelector","changeScore","Questions","useNavigate","ResetButton","jsxDEV","_jsxDEV","QuizScreen","_s","currentQuestionIndex","setCurrentQuestionIndex","currentScore","setCurrentScore","currentOption","setCurrentOption","navigate","dispatch","score","state","currentQuestion","handleAnswerSelection","isCorrect","handleNextQuestion","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","options","map","option","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/user/my-app/src/components/pages/QuizScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeScore } from \"../../Redux/actions\";\r\nimport Questions from \"../../Data/Questions\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ResetButton from \"../buttons/ResetButton\";\r\n\r\n\r\n\r\nfunction QuizScreen() {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // State to keep track of current question\r\n  const [currentScore, setCurrentScore] = useState(0); // State to keep track of score\r\n  const [currentOption, setCurrentOption] = useState(null);\r\n  const navigate = useNavigate(); // Navigate to different routes in the app\r\n  const dispatch = useDispatch(); //Dispatch action to update state in Redux store\r\n  const score = useSelector((state) => state.score); // Accessing score from Redux store\r\n  \r\n\r\n  const currentQuestion = Questions[currentQuestionIndex];\r\n\r\n  // Handle answer selected by user\r\n  const handleAnswerSelection = (isCorrect) => {\r\n     setCurrentOption(isCorrect);\r\n  };\r\n\r\n  // Handle next question\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex < Questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      if (currentOption === true) {\r\n        dispatch(changeScore(score + 1));\r\n      }\r\n    } else {\r\n      navigate(\"/result\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h2>Quiz Screen</h2>\r\n      {currentQuestion && (\r\n        <div>\r\n          <h3>{currentQuestion.text}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option) => (\r\n              <li key={option.id}>\r\n                <button onClick={() => handleAnswerSelection(option.isCorrect)}>\r\n                  {option.text}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button onClick={handleNextQuestion}>Next Question</button>\r\n        </div>\r\n      )}\r\n      <p>Current Score: {score}</p>\r\n      <ResetButton />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}