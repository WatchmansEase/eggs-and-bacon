{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\components\\\\QuizScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { changeScreen } from '../Redux/actions';\nimport Questions from '../Redux/Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen({\n  changeScreen\n}) {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const currentQuestion = Questions[currentQuestionIndex];\n  const handleAnswerSelection = isCorrect => {\n    if (isCorrect) {\n      // Handle correct answer logic if needed\n    }\n    // Move to the next question\n    if (currentQuestionIndex < Questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // If all questions answered, move to result screen or intro screen, as needed\n      changeScreen('result'); // Change to result screen when all questions are answered\n    }\n  };\n\n  const handleGoBack = () => {\n    changeScreen('intro'); // Dispatch changeScreen action with \"intro\" screen\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quiz Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAnswerSelection(option.isCorrect),\n            children: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGoBack,\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizScreen, \"/TKtEVk4bXISO4WPmKbHy0C8rGs=\");\n_c = QuizScreen;\nconst mapDispatchToProps = dispatch => ({\n  changeScreen: screen => dispatch(changeScreen(screen))\n});\nexport default connect(null, mapDispatchToProps)(QuizScreen);\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useState","connect","changeScreen","Questions","jsxDEV","_jsxDEV","QuizScreen","_s","currentQuestionIndex","setCurrentQuestionIndex","currentQuestion","handleAnswerSelection","isCorrect","length","handleGoBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","options","map","option","onClick","id","_c","mapDispatchToProps","dispatch","screen","$RefreshReg$"],"sources":["C:/Users/user/my-app/src/components/QuizScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeScreen } from '../Redux/actions';\r\nimport Questions from '../Redux/Questions';\r\n\r\nfunction QuizScreen({ changeScreen }) {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const currentQuestion = Questions[currentQuestionIndex];\r\n\r\n  const handleAnswerSelection = (isCorrect) => {\r\n    if (isCorrect) {\r\n      // Handle correct answer logic if needed\r\n    }\r\n    // Move to the next question\r\n    if (currentQuestionIndex < Questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // If all questions answered, move to result screen or intro screen, as needed\r\n      changeScreen('result'); // Change to result screen when all questions are answered\r\n    }\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    changeScreen('intro'); // Dispatch changeScreen action with \"intro\" screen\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h2>Quiz Screen</h2>\r\n      {currentQuestion && (\r\n        <div>\r\n          <h3>{currentQuestion.text}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option) => (\r\n              <li key={option.id}>\r\n                <button onClick={() => handleAnswerSelection(option.isCorrect)}>\r\n                  {option.text}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <button onClick={handleGoBack}>Go Back</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeScreen: (screen) => dispatch(changeScreen(screen)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(QuizScreen);"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,SAAS,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,UAAUA,CAAC;EAAEJ;AAAa,CAAC,EAAE;EAAAK,EAAA;EACpC,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAMU,eAAe,GAAGP,SAAS,CAACK,oBAAoB,CAAC;EAEvD,MAAMG,qBAAqB,GAAIC,SAAS,IAAK;IAC3C,IAAIA,SAAS,EAAE;MACb;IAAA;IAEF;IACA,IAAIJ,oBAAoB,GAAGL,SAAS,CAACU,MAAM,GAAG,CAAC,EAAE;MAC/CJ,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD,CAAC,MAAM;MACL;MACAN,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;;EAED,MAAMY,YAAY,GAAGA,CAAA,KAAM;IACzBZ,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;EACzB,CAAC;;EAED,oBACEG,OAAA;IAAKU,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BX,OAAA;MAAAW,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBV,eAAe,iBACdL,OAAA;MAAAW,QAAA,gBACEX,OAAA;QAAAW,QAAA,EAAKN,eAAe,CAACW;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC/Bf,OAAA;QAAAW,QAAA,EACGN,eAAe,CAACY,OAAO,CAACC,GAAG,CAAEC,MAAM,iBAClCnB,OAAA;UAAAW,QAAA,eACEX,OAAA;YAAQoB,OAAO,EAAEA,CAAA,KAAMd,qBAAqB,CAACa,MAAM,CAACZ,SAAS,CAAE;YAAAI,QAAA,EAC5DQ,MAAM,CAACH;UAAI;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN;QAAC,GAHFI,MAAM,CAACE,EAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAId,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN,eACDf,OAAA;MAAQoB,OAAO,EAAEX,YAAa;MAAAE,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CAAC;AAEV;AAACb,EAAA,CAzCQD,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AA2CnB,MAAMsB,kBAAkB,GAAIC,QAAQ,KAAM;EACxC3B,YAAY,EAAG4B,MAAM,IAAKD,QAAQ,CAAC3B,YAAY,CAAC4B,MAAM,CAAC;AACzD,CAAC,CAAC;AAEF,eAAe7B,OAAO,CAAC,IAAI,EAAE2B,kBAAkB,CAAC,CAACtB,UAAU,CAAC;AAAC,IAAAqB,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}