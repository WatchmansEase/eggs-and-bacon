{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\components\\\\QuizScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { changeScreen } from '../Redux/actions';\nimport Questions from '../Redux/Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen({\n  changeScreen\n}) {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const currentQuestion = Questions[currentQuestionIndex];\n  const handleAnswerSelection = isCorrect => {\n    if (isCorrect) {\n      // Increase the score if the answer is correct\n      setScore(score + 1);\n    }\n  };\n  const handleNextQuestion = () => {\n    // Move to the next question\n    if (currentQuestionIndex < Questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // If all questions answered, move to the result screen\n      changeScreen('result'); // Change to result screen when all questions are answered\n    }\n  };\n\n  const handleGoBack = () => {\n    changeScreen('intro'); // Dispatch changeScreen action with \"intro\" screen\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quiz Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              handleAnswerSelection(option.isCorrect);\n            },\n            children: option.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextQuestion,\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Current Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGoBack,\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizScreen, \"VSe/zGaszi5H8U3t1r1DTVKnbNg=\");\n_c = QuizScreen;\nconst mapDispatchToProps = dispatch => ({\n  changeScreen: screen => dispatch(changeScreen(screen))\n});\nexport default connect(null, mapDispatchToProps)(QuizScreen);\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useState","connect","changeScreen","Questions","jsxDEV","_jsxDEV","QuizScreen","_s","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","currentQuestion","handleAnswerSelection","isCorrect","handleNextQuestion","length","handleGoBack","className","children","fileName","_jsxFileName","lineNumber","columnNumber","text","options","map","option","onClick","id","_c","mapDispatchToProps","dispatch","screen","$RefreshReg$"],"sources":["C:/Users/user/my-app/src/components/QuizScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeScreen } from '../Redux/actions';\r\nimport Questions from '../Redux/Questions';\r\n\r\nfunction QuizScreen({ changeScreen }) {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n\r\n  const currentQuestion = Questions[currentQuestionIndex];\r\n\r\n  const handleAnswerSelection = (isCorrect) => {\r\n    if (isCorrect) {\r\n      // Increase the score if the answer is correct\r\n      setScore(score + 1);\r\n    }\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    // Move to the next question\r\n    if (currentQuestionIndex < Questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // If all questions answered, move to the result screen\r\n      changeScreen('result'); // Change to result screen when all questions are answered\r\n    }\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    changeScreen('intro'); // Dispatch changeScreen action with \"intro\" screen\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h2>Quiz Screen</h2>\r\n      {currentQuestion && (\r\n        <div>\r\n          <h3>{currentQuestion.text}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option) => (\r\n              <li key={option.id}>\r\n                <button\r\n                  onClick={() => {\r\n                    handleAnswerSelection(option.isCorrect);\r\n                  }}\r\n                >\r\n                  {option.text}\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <button onClick={handleNextQuestion}>Next Question</button>\r\n        </div>\r\n      )}\r\n      <p>Current Score: {score}</p>\r\n      <button onClick={handleGoBack}>Go Back</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeScreen: (screen) => dispatch(changeScreen(screen)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(QuizScreen);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}