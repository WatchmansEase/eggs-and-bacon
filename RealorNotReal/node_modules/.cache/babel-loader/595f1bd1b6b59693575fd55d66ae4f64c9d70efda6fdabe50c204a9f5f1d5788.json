{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\components\\\\QuizScreen.js\",\n  _s = $RefreshSig$();\n// components/QuizScreen.js\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchQuestions, setScore } from '../Redux/actions'; // Assuming relevant action creators\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen({\n  questions,\n  currQuestionIndex,\n  setScore,\n  fetchQuestions\n}) {\n  _s();\n  useEffect(() => {\n    // Fetch questions once the component mounts\n    fetchQuestions();\n  }, [fetchQuestions]);\n  const handleOptionClick = selectedOption => {\n    // Ensure questions are available before processing\n    if (!questions || questions.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 14\n      }, this); // Handle loading state\n    }\n\n    const correctAnswer = questions[currQuestionIndex].options.find(option => option.isCorrect);\n    if (selectedOption === correctAnswer.text) {\n      setScore(); // Call the action to increment the score\n    }\n    // Handle other logic for user's option selection\n  };\n\n  // ...rest of the component\n}\n_s(QuizScreen, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = QuizScreen;\nconst mapStateToProps = state => ({\n  questions: state.questions,\n  // Assuming questions are stored in Redux state\n  currQuestionIndex: state.currQuestionIndex // Current question index in Redux state\n  // Add other necessary state properties...\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setScore: () => dispatch(setScore()),\n  // Action to update the score\n  fetchQuestions: () => dispatch(fetchQuestions()) // Action to fetch questions\n  // Add other action creators if needed...\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizScreen);\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","useEffect","connect","fetchQuestions","setScore","jsxDEV","_jsxDEV","QuizScreen","questions","currQuestionIndex","_s","handleOptionClick","selectedOption","length","children","fileName","_jsxFileName","lineNumber","columnNumber","correctAnswer","options","find","option","isCorrect","text","_c","mapStateToProps","state","mapDispatchToProps","dispatch","$RefreshReg$"],"sources":["C:/Users/user/my-app/src/components/QuizScreen.js"],"sourcesContent":["// components/QuizScreen.js\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchQuestions, setScore } from '../Redux/actions'; // Assuming relevant action creators\r\n\r\nfunction QuizScreen({ questions, currQuestionIndex, setScore, fetchQuestions }) {\r\n  useEffect(() => {\r\n    // Fetch questions once the component mounts\r\n    fetchQuestions();\r\n  }, [fetchQuestions]);\r\n\r\n  const handleOptionClick = (selectedOption) => {\r\n    // Ensure questions are available before processing\r\n    if (!questions || questions.length === 0) {\r\n      return <div>Loading...</div>; // Handle loading state\r\n    }\r\n\r\n    const correctAnswer = questions[currQuestionIndex].options.find(\r\n      (option) => option.isCorrect\r\n    );\r\n    if (selectedOption === correctAnswer.text) {\r\n      setScore(); // Call the action to increment the score\r\n    }\r\n    // Handle other logic for user's option selection\r\n  };\r\n\r\n  // ...rest of the component\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  questions: state.questions, // Assuming questions are stored in Redux state\r\n  currQuestionIndex: state.currQuestionIndex, // Current question index in Redux state\r\n  // Add other necessary state properties...\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setScore: () => dispatch(setScore()), // Action to update the score\r\n  fetchQuestions: () => dispatch(fetchQuestions()), // Action to fetch questions\r\n  // Add other action creators if needed...\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizScreen);"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,cAAc,EAAEC,QAAQ,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7D,SAASC,UAAUA,CAAC;EAAEC,SAAS;EAAEC,iBAAiB;EAAEL,QAAQ;EAAED;AAAe,CAAC,EAAE;EAAAO,EAAA;EAC9ET,SAAS,CAAC,MAAM;IACd;IACAE,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EAEpB,MAAMQ,iBAAiB,GAAIC,cAAc,IAAK;IAC5C;IACA,IAAI,CAACJ,SAAS,IAAIA,SAAS,CAACK,MAAM,KAAK,CAAC,EAAE;MACxC,oBAAOP,OAAA;QAAAQ,QAAA,EAAK;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,CAAC,CAAC;IAChC;;IAEA,MAAMC,aAAa,GAAGX,SAAS,CAACC,iBAAiB,CAAC,CAACW,OAAO,CAACC,IAAI,CAC5DC,MAAM,IAAKA,MAAM,CAACC,SACrB,CAAC;IACD,IAAIX,cAAc,KAAKO,aAAa,CAACK,IAAI,EAAE;MACzCpB,QAAQ,CAAC,CAAC,CAAC,CAAC;IACd;IACA;EACF,CAAC;;EAED;AACF;AAACM,EAAA,CAtBQH,UAAU;AAAAkB,EAAA,GAAVlB,UAAU;AAwBnB,MAAMmB,eAAe,GAAIC,KAAK,KAAM;EAClCnB,SAAS,EAAEmB,KAAK,CAACnB,SAAS;EAAE;EAC5BC,iBAAiB,EAAEkB,KAAK,CAAClB,iBAAiB,CAAE;EAC5C;AACF,CAAC,CAAC;;AAEF,MAAMmB,kBAAkB,GAAIC,QAAQ,KAAM;EACxCzB,QAAQ,EAAEA,CAAA,KAAMyB,QAAQ,CAACzB,QAAQ,CAAC,CAAC,CAAC;EAAE;EACtCD,cAAc,EAAEA,CAAA,KAAM0B,QAAQ,CAAC1B,cAAc,CAAC,CAAC,CAAC,CAAE;EAClD;AACF,CAAC,CAAC;;AAEF,eAAeD,OAAO,CAACwB,eAAe,EAAEE,kBAAkB,CAAC,CAACrB,UAAU,CAAC;AAAC,IAAAkB,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}