{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\components\\\\QuizScreen.js\";\n// components/QuizScreen.js\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { setCurrentQuestionIndex, incrementScore, changeScreen } from '../Redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizScreen({\n  questions,\n  currentQuestionIndex,\n  score,\n  setCurrentQuestionIndex,\n  incrementScore,\n  setGameState\n}) {\n  const handleOptionClick = selectedOption => {\n    const correctAnswer = questions[currentQuestionIndex].options.find(option => option.isCorrect);\n    if (selectedOption === correctAnswer.text) {\n      incrementScore();\n    }\n\n    // Logic to handle other aspects of option selection\n\n    // Move to the next question or end the quiz\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // End the quiz, navigate to result screen or handle as needed\n      setGameState('end');\n    }\n  };\n  if (!questions || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this); // Handle loading state\n  }\n\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentQuestion.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: currentQuestion.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"option\",\n        onClick: () => handleOptionClick(option.text),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: option.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Progress: \", currentQuestionIndex + 1, \" / \", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c = QuizScreen;\nconst mapStateToProps = state => ({\n  questions: state.questions,\n  currentQuestionIndex: state.currentQuestionIndex,\n  score: state.score\n});\nconst mapDispatchToProps = {\n  setCurrentQuestionIndex,\n  incrementScore,\n  setGameState\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizScreen);\nvar _c;\n$RefreshReg$(_c, \"QuizScreen\");","map":{"version":3,"names":["React","connect","setCurrentQuestionIndex","incrementScore","changeScreen","jsxDEV","_jsxDEV","QuizScreen","questions","currentQuestionIndex","score","setGameState","handleOptionClick","selectedOption","correctAnswer","options","find","option","isCorrect","text","length","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","className","map","onClick","id","_c","mapStateToProps","state","mapDispatchToProps","$RefreshReg$"],"sources":["C:/Users/user/my-app/src/components/QuizScreen.js"],"sourcesContent":["// components/QuizScreen.js\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setCurrentQuestionIndex, incrementScore, changeScreen } from '../Redux/actions';\r\n\r\nfunction QuizScreen({\r\n  questions,\r\n  currentQuestionIndex,\r\n  score,\r\n  setCurrentQuestionIndex,\r\n  incrementScore,\r\n  setGameState,\r\n}) {\r\n  const handleOptionClick = (selectedOption) => {\r\n    const correctAnswer = questions[currentQuestionIndex].options.find(\r\n      (option) => option.isCorrect\r\n    );\r\n\r\n    if (selectedOption === correctAnswer.text) {\r\n      incrementScore();\r\n    }\r\n\r\n    // Logic to handle other aspects of option selection\r\n\r\n    // Move to the next question or end the quiz\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // End the quiz, navigate to result screen or handle as needed\r\n      setGameState('end');\r\n    }\r\n  };\r\n\r\n  if (!questions || questions.length === 0) {\r\n    return <div>Loading...</div>; // Handle loading state\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-screen\">\r\n      <h2>Question {currentQuestionIndex + 1} of {questions.length}</h2>\r\n      <h3>{currentQuestion.text}</h3>\r\n      <div className=\"options\">\r\n        {currentQuestion.options.map((option) => (\r\n          <div\r\n            key={option.id}\r\n            className=\"option\"\r\n            onClick={() => handleOptionClick(option.text)}\r\n          >\r\n            <p>{option.text}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <p>Progress: {currentQuestionIndex + 1} / {questions.length}</p>\r\n      <p>Score: {score}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  questions: state.questions,\r\n  currentQuestionIndex: state.currentQuestionIndex,\r\n  score: state.score,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  setCurrentQuestionIndex,\r\n  incrementScore,\r\n  setGameState,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizScreen);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}